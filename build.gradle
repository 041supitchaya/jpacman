plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '1.7.1'
}

sourceSets {
    studentTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/student-test/java')
        }
        resources.srcDir file('src/student-test/resources')
    }
}

configurations {
    studentTestCompile.extendsFrom testCompile
    studentTestImplementation.extendsFrom testImplementation
    studentTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    compile "com.google.guava:guava:$guavaVersion"

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsAnnotationsVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"
}

task studentTest(type: Test) {
    testClassesDirs = sourceSets.studentTest.output.classesDirs
    classpath = sourceSets.studentTest.runtimeClasspath
}
test.dependsOn studentTest

test {
    useJUnitPlatform()
}

studentTest {
    useJUnitPlatform()
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    executionData tasks.withType(Test)
}

checkstyle {
    configFile file("checkstyle.xml")
    ignoreFailures = false
}

pmd {
    ruleSetFiles "pmd-rules.xml"
    ruleSets = []
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task staticAnalysis(type: GradleBuild) {
    tasks = [
        'clean',
        'checkstyleMain',
        'checkstyleTest',
        'checkstyleStudentTest',
        'pmdMain',
        'pmdTest',
        'pmdStudentTest',
        'spotbugsMain',
        'spotbugsTest',
        'spotbugsStudentTest',
    ]
}

mainClassName = 'nl.tudelft.jpacman.Launcher'
